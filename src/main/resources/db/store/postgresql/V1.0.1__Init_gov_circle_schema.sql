create table public.gc_application_user
(
    status        smallint
        constraint gc_application_user_status_check
            check ((status >= 0) AND (status <= 1)),
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    email         varchar(255),
    ip            varchar(255),
    nonce         varchar(255),
    useraddress   varchar(255) not null
        unique,
    username      varchar(255)
);

create table public.gc_action
(
    droppedepoch    integer not null,
    enactedepoch    integer not null,
    expiredepoch    integer not null,
    expiryepoch     integer not null,
    ratifiedepoch   integer not null,
    submissionepoch integer not null,
    voteabstain     integer not null,
    voteno          integer not null,
    voteyes         integer not null,
    created_at      timestamp(6),
    created_by_id   bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id              bigint generated by default as identity
        primary key,
    updated_at      timestamp(6),
    updated_by_id   bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    actiontype      varchar(255)
        constraint gc_action_actiontype_check
            check ((actiontype)::text = ANY
        ((ARRAY ['MOTION_OF_NO_CONFIDENCE'::character varying, 'UPDATE_COMMITTEE'::character varying, 'NEW_CONSTITUTION'::character varying, 'HF_INITIATION'::character varying, 'PROTOCOL_PARAMETER_CHANGE'::character varying, 'PROTOCOL_PARAMETER_CHANGE_ECONOMIC_GROUP'::character varying, 'PROTOCOL_PARAMETER_CHANGE_TECHNICAL_GROUP'::character varying, 'PROTOCOL_PARAMETER_CHANGE_GOVERNANCE_GROUP'::character varying, 'PROTOCOL_PARAMETER_CHANGE_NETWORK_GROUP'::character varying, 'TREASURY_WITHDRAWAL'::character varying, 'INFO'::character varying])::text[])),
    certindex       varchar(255),
    depositamount   varchar(255),
    ip              varchar(255),
    stakeaddress    varchar(255),
    status          varchar(255)
        constraint gc_action_status_check
            check ((status)::text = ANY
                   ((ARRAY ['ACTIVE'::character varying, 'EXPIRED'::character varying, 'INACTIVE'::character varying])::text[])),
    tag             varchar(255),
    title           varchar(255),
    txhash          varchar(255)
);

create table public.gc_authority
(
    code          integer      not null
        unique,
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    authoritytype varchar(255)
        constraint gc_authority_authoritytype_check
            check ((authoritytype)::text = ANY
        ((ARRAY ['CREATE'::character varying, 'READ'::character varying, 'UPDATE'::character varying, 'DELETE'::character varying])::text[])),
    description   varchar(255),
    ip            varchar(255),
    title         varchar(255) not null
        unique
);

create table public.gc_constitution_branch
(
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    gov_action_id bigint
        unique
        constraint opinion_gov_action_fk_id
            references public.gc_action,
    id            bigint generated by default as identity
        primary key,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    datahash      varchar(255),
    ip            varchar(255),
    script        varchar(255),
    url           varchar(255),
    certificate   jsonb
);


create table public.gc_merge_request
(
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    ip            varchar(255)
);

create table public.gc_opinion
(
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    owner_id      bigint not null
        unique
        constraint opinion_owner_fk_id
            references public.gc_application_user,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    intention     varchar(255),
    ip            varchar(255),
    status        varchar(255)
        constraint gc_opinion_status_check
            check ((status)::text = ANY
        ((ARRAY ['CONFLICT'::character varying, 'DRAFT'::character varying, 'LIVE'::character varying, 'VOTING_PENDING'::character varying, 'RATIFIED'::character varying, 'DENIED'::character varying, 'CLOSED'::character varying])::text[])),
    useract       text
);

create table public.gc_amendment
(
    constitution_id bigint not null
        constraint amendment_constitution_fk_id
            references public.gc_constitution_branch,
    created_at      timestamp(6),
    created_by_id   bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id              bigint generated by default as identity
        primary key,
    opinion_id      bigint not null
        constraint amendment_opinion_fk_id
            references public.gc_opinion,
    updated_at      timestamp(6),
    updated_by_id   bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    amendmenttype   varchar(255)
        constraint gc_amendment_amendmenttype_check
            check ((amendmenttype)::text = ANY
        ((ARRAY ['SPLIT'::character varying, 'MERGE'::character varying, 'EDIT'::character varying, 'DELETE'::character varying, 'ADD'::character varying])::text[])),
    ip              varchar(255),
    srcrules        text,
    targetrules     text
);


create table public.gc_role
(
    code          integer      not null
        unique,
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    description   varchar(255),
    ip            varchar(255),
    title         varchar(255) not null
        unique
);

create table public.gc_role_authority
(
    end_slot      integer,
    start_slot    integer,
    authority_id  bigint not null
        constraint ra_authority_fk_id
            references public.gc_authority,
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    role_id       bigint not null
        constraint ra_role_fk_id
            references public.gc_role,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    ip            varchar(255)
);

create table public.gc_rule
(
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    ip            varchar(255),
    rule          varchar(255),
    status        varchar(255)
        constraint gc_rule_status_check
            check ((status)::text = ANY ((ARRAY ['EXPIRED'::character varying, 'ACTIVE'::character varying])::text[]))
    );

create table public.gc_constitution_rule
(
    ruleorder              integer not null,
    constitution_branch_id bigint  not null
        constraint constitution_rule_branch_fk_id
            references public.gc_constitution_branch,
    created_at             timestamp(6),
    created_by_id          bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id                     bigint generated by default as identity
        primary key,
    parent_rule_id         bigint  not null
        constraint constitution_rule_parent_fk_id
            references public.gc_rule,
    rule_id                bigint  not null
        constraint constitution_rule_fk_id
            references public.gc_rule,
    updated_at             timestamp(6),
    updated_by_id          bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    ip                     varchar(255)
);

create table public.gc_rule_change_history
(
    base_rule_id    bigint not null
        constraint rule_change_base_rule_fk_id
            references public.gc_constitution_rule,
    created_at      timestamp(6),
    created_by_id   bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id              bigint generated by default as identity
        primary key,
    revised_rule_id bigint not null
        constraint rule_change_revised_rule_fk_id
            references public.gc_constitution_rule,
    updated_at      timestamp(6),
    updated_by_id   bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    amendmenttype   varchar(255)
        constraint gc_rule_change_history_amendmenttype_check
            check ((amendmenttype)::text = ANY
        ((ARRAY ['SPLIT'::character varying, 'MERGE'::character varying, 'EDIT'::character varying, 'DELETE'::character varying, 'ADD'::character varying])::text[])),
    ip              varchar(255)
);

create table public.gc_user_authority
(
    end_slot      integer,
    start_slot    integer,
    authority_id  bigint not null
        constraint ua_authority_fk_id
            references public.gc_authority,
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    user_id       bigint not null
        constraint ua_user_fk_id
            references public.gc_application_user,
    ip            varchar(255)
);

create table public.gc_user_role
(
    end_slot                integer,
    start_slot              integer,
    created_at              timestamp(6),
    created_by_id           bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id                      bigint generated by default as identity
        primary key,
    role_id                 bigint not null
        constraint ur_role_fk_id
            references public.gc_role,
    updated_at              timestamp(6),
    updated_by_id           bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    user_id                 bigint not null
        constraint ur_user_fk_id
            references public.gc_application_user,
    actorregistrationstatus varchar(255)
        constraint gc_user_role_actorregistrationstatus_check
            check ((actorregistrationstatus)::text = ANY
        ((ARRAY ['REGISTER'::character varying, 'DEREGISTER'::character varying])::text[])),
    ip                      varchar(255)
);


create table public.gc_voting_threshold
(
    percentage    integer not null,
    created_at    timestamp(6),
    created_by_id bigint
        constraint creating_user_fk_id
            references public.gc_application_user,
    id            bigint generated by default as identity
        primary key,
    role_id       bigint  not null
        constraint voting_threshold_role_fk_id
            references public.gc_role,
    updated_at    timestamp(6),
    updated_by_id bigint
        constraint updating_user_fk_id
            references public.gc_application_user,
    actiontype    varchar(255)
        constraint gc_voting_threshold_actiontype_check
            check ((actiontype)::text = ANY
        ((ARRAY ['MOTION_OF_NO_CONFIDENCE'::character varying, 'UPDATE_COMMITTEE'::character varying, 'NEW_CONSTITUTION'::character varying, 'HF_INITIATION'::character varying, 'PROTOCOL_PARAMETER_CHANGE'::character varying, 'PROTOCOL_PARAMETER_CHANGE_ECONOMIC_GROUP'::character varying, 'PROTOCOL_PARAMETER_CHANGE_TECHNICAL_GROUP'::character varying, 'PROTOCOL_PARAMETER_CHANGE_GOVERNANCE_GROUP'::character varying, 'PROTOCOL_PARAMETER_CHANGE_NETWORK_GROUP'::character varying, 'TREASURY_WITHDRAWAL'::character varying, 'INFO'::character varying])::text[])),
    ip            varchar(255)
);
